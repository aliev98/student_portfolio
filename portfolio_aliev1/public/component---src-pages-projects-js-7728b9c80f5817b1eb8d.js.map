{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/containers/ButtonLink.js","webpack:///./src/components/containers/OuterPart.js","webpack:///./src/components/Project.js","webpack:///./src/components/Projects.js","webpack:///./src/components/containers/InnerPart.js"],"names":["query","ProjectsPage","projects","data","allStrapiProjects","nodes","title","description","className","StyledButtonLink","styled","props","theme","colors","primary5","primary9","spacings","spacing","transitions","transition","radius","center","primary1","primary8","ButtonLink","to","name","StyledOuterContentContainer","section","grey","grey10","OuterContentContainer","children","StyledImage","index","shadows","darkShadow","ProjectInfo","div","white","StyledProject","article","ProjectNumber","ProjectLinks","ProjectStack","grey9","grey5","Project","github","stack","url","image","fluid","childImageSharp","map","item","key","id","href","target","Projects","showLink","Title","type","project","StyledInnerContainer","width","widths","maxWidth","InnerContentContainer"],"mappings":"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","file":"component---src-pages-projects-js-7728b9c80f5817b1eb8d.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/Layout\"\nimport { graphql } from \"gatsby\"\nimport Projects from \"../components/Projects\"\nimport SEO from \"../components/SEO\"\n// ...GatsbyImageSharpFluid\n\nconst ProjectsPage = ({\n  data: {\n    allStrapiProjects: { nodes: projects },\n  },\n\n}) => {\n  return (\n    <Layout>\n      <SEO title=\"Projekt\" description=\"Projektsidan\" />\n      <section className=\"project-page\">\n        <Projects projects={projects} title=\"Alla projekt\" />\n      </section>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  {\n   allStrapiProjects {\n      nodes {\n        github\n        id\n        description\n        title\n        url\n        image {\n          childImageSharp {\n            fluid {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        stack {\n          id\n          title\n        }\n      }\n    }\n  }\n`\n\nexport default ProjectsPage\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { Link } from \"gatsby\"\r\n\r\n/*\r\n     I have created a button/link component \r\n     out of the global classes called 'btn' and 'center-btn'\r\n     If it is centered or not has become a prop... \r\n*/\r\n\r\nconst StyledButtonLink = styled(props => <Link {...props} />)`\r\n    text-transform: uppercase;\r\n    background:  ${({ theme }) => theme.colors.primary5};;\r\n    color:  ${({ theme }) => theme.colors.primary9};\r\n    padding: 0.375rem 0.75rem;\r\n    letter-spacing: ${({ theme }) => theme.spacings.spacing};\r\n    font-weight: 700;\r\n    -webkit-transition: ${({ theme }) => theme.transitions.transition};\r\n    transition: ${({ theme }) => theme.transitions.transition};\r\n    font-size: 0.875rem;\r\n    border: 2px solid transparent;\r\n    cursor: pointer;\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\r\n    border-radius: ${({ theme }) => theme.radius.radius};\r\n    display: ${({ center }) => (center ? \"block\" : \"inline-block\")};\r\n    width: ${({ center }) => center && \"12rem\"};\r\n    text-align:  ${({ center }) => center && \"center\"};\r\n    margin: ${({ center }) => center && \"0 auto\"};\r\n    margin-top: ${({ center }) => center && \"3rem\"};\r\n  \r\n  &:hover {\r\n    color:${({ theme }) => theme.colors.primary1};\r\n    background: ${({ theme }) => theme.colors.primary8};\r\n  }\r\n`\r\n\r\nconst ButtonLink = ({ center, to, name }) => {\r\n  return (\r\n    <StyledButtonLink to={to} center={center}>\r\n      {name}\r\n    </StyledButtonLink>\r\n  )\r\n} \r\n\r\nexport default ButtonLink","import React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\n/*\r\n I have turned the section class (. section in main.css) into this \r\n container-component. I included a grey-prop to be able to \r\n alternate between white and grey sections.\r\n*/\r\n\r\n\r\nconst StyledOuterContentContainer = styled.section`\r\n  padding: 5rem 0;\r\n  background: ${({ theme, grey }) => grey && theme.colors.grey10};\r\n`\r\n\r\nconst OuterContentContainer = ({ children, grey }) => {\r\n  return <StyledOuterContentContainer grey={grey}>{children}</StyledOuterContentContainer>\r\n}\r\n\r\nexport default OuterContentContainer;","// import React from \"react\"\n// import PropTypes from \"prop-types\"\n// import Image from \"gatsby-image\"\n// import { FaGithubSquare, FaShareSquare } from \"react-icons/fa\"\n\n\n// const Project = ({ description, title, github, stack, url, image, index }) => {\n//   return (\n//     <article className=\"project\">\n//       {/* if image is not supplied, instead of breaking, dont show any image */}\n//       {image && (\n//         <Image fluid={image.childImageSharp.fluid} className=\"project-img\" />\n//       )}\n      \n//       <div className=\"project-info\">\n//         <span className=\"project-number\">0{index + 1}.</span>\n//         {/* if title is not supplied, set a defualt title */}\n//         <h3>{title || \"Projekt\"}</h3>\n//         <p className=\"project-description\">{description}</p>\n//         <div className=\"project-stack\">\n//           {stack.map(item => {\n//             return <span key={item.id}>{item.title}</span>\n//           })}\n//         </div>\n//         <div className=\"project-links\">\n//           <a href={github}>\n//             <FaGithubSquare className=\"project-icon\" />\n//           </a>\n//           <a href={url}>\n//             <FaShareSquare className=\"project-icon\" />\n//           </a>\n//         </div>\n//       </div>\n//     </article>\n//   )\n// }\n\n// /*if you for example forget to set these fields in strapi,\n// so if you forget to give them values, you will get a error in your console\n// */\n// Project.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   git: PropTypes.string.isRequired,\n//   url: PropTypes.string.isRequired,\n//   description: PropTypes.string.isRequired,\n//   image: PropTypes.object.isRequired,\n//   stack: PropTypes.arrayOf(PropTypes.object).isRequired,\n// }\n\n// export default Project\n\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Image from \"gatsby-image\"\nimport { FaGithubSquare, FaShareSquare } from \"react-icons/fa\"\nimport styled from \"styled-components\"\n\n// Here we create one 'Project in focus'\n\nconst StyledImage = styled(props => <Image {...props} />)`\n  border-top-left-radius: ${({ theme }) => theme.radius.radius};\n  border-top-right-radius: ${({ theme }) => theme.radius.radius};\n  height: 19rem;\n  z-index: 1;\n\n  ::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      to bottom right,\n      ${({ theme }) => theme.colors.primary5},\n      #222\n    );\n    opacity: 0.85;\n    transition: ${({ theme }) => theme.transitions.transition};\n  }\n\n  @media screen and (min-width: 768px) {\n    height: 22rem;\n  }\n  @media screen and (min-width: 992px) {\n    grid-column: ${({ index }) => (index % 2 !== 0 ? \"5/-1\" : \"1 / span 8\")};\n    grid-row: 1 / 1;\n    height: 30rem;\n    border-radius: ${({ theme }) => theme.radius.radius};\n    box-shadow: ${({ theme }) => theme.shadows.darkShadow};\n  }\n`\n\nconst ProjectInfo = styled.div`\n  background: ${({ theme }) => theme.colors.white};\n  padding: 1rem 2rem;\n  border-bottom-left-radius: ${({ theme }) => theme.radius.radius};\n  border-bottom-right-radius: ${({ theme }) => theme.radius.radius};\n\n  h3 {\n    font-weight: 500;\n    margin-bottom: 1.5rem;\n    font-size: 1.5rem;\n  }\n\n  \n  @media screen and (min-width: 992px) {\n    border-radius: ${({ theme }) => theme.radius.radius};\n    box-shadow: ${({ theme }) => theme.shadows.darkShadow};\n    z-index: 1;\n    grid-column: ${({ index }) => (index % 2 === 0 ? \"5 / 12\" : \"2 / span 7\")};\n    grid-row: 1 / 1;\n    text-align: ${({ index }) => index % 2 === 0 && \"left\"};\n  }\n`\n\nconst StyledProject = styled.article`\n  display: grid;\n  margin-bottom: 4rem;\n\n  @media screen and (min-width: 992px) {\n    grid-template-columns: repeat(12, 1fr);\n    align-items: center;\n  }\n\n  :hover ${StyledImage} ::after {\n    opacity: 0;\n  }\n`\n\nconst ProjectNumber = styled.div`\n  display: inline-block;\n  font-size: 1.25rem;\n  color: ${({ theme }) => theme.colors.primary5};\n  margin-bottom: 0.75rem;\n`\n\nconst ProjectLinks = styled.div`\n  a {\n    color: ${({ theme }) => theme.colors.primary5};\n    font-size: 1.25rem;\n    margin-right: 0.5rem;\n    transition: ${({ theme }) => theme.transitions.transition};\n    :hover {\n      color: ${({ theme }) => theme.colors.primary1};\n    }\n  }\n`\nconst ProjectStack = styled.div`\n  span {\n    margin-bottom: 1rem;\n    display: inline-block;\n    background: ${({ theme }) => theme.colors.grey9};\n    color: ${({ theme }) => theme.colors.grey5};\n    margin-right: 0.5rem;\n    padding: 0.25rem 0.5rem;\n    border-radius: ${({ theme }) => theme.radius.radius};\n    text-transform: uppercase;\n    letter-spacing: 2px;\n    font-size: 0.85rem;\n  }\n`\nconst Project = ({ description, title, github, stack, url, image, index }) => {\n  return (\n    <StyledProject>\n      {image && (\n        <StyledImage fluid={image.childImageSharp.fluid} index={index} />\n      )}\n      <ProjectInfo index={index}>\n        <ProjectNumber>0{index + 1}.</ProjectNumber>\n        <h3>{title || \"Projekt\"}</h3>\n        <p>{description}</p>\n        <ProjectStack>\n          {stack.map(item => {\n            return <span key={item.id}>{item.title}</span>\n          })}\n        </ProjectStack>\n        <ProjectLinks>\n          {/*\n          When I don't have links to my projects, I have fill the required \n          field in the strapi entry with a / . I will, for now, not display \n          any links for projects that I have not hosted somewhere. \n          */}\n          {github !== \"/\" && (\n            <a href={github} target=\"_blank\">\n              <FaGithubSquare />\n            </a>\n          )}\n          {url !== \"/\" && (\n            <a href={url} target=\"_blank\">\n              <FaShareSquare />\n            </a>\n          )}\n        </ProjectLinks>\n      </ProjectInfo>\n    </StyledProject>\n  )\n}\n\nProject.propTypes = {\n  title: PropTypes.string.isRequired,\n  git: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.object.isRequired,\n  stack: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default Project\n","// import React from \"react\"\n// import Title from \"./Title\"\n// import Project from \"./Project\"\n// import { Link } from \"gatsby\"\n\n// const Projects = ({ projects, title, showLink }) => {\n//   return (\n//     <section className=\"section projects\">\n//       <Title title={title} />\n\n//       <div className=\"section-center projects-center\">\n//         {projects.map((project, index) => {\n//           return <Project key={project.id} index={index} {...project} />\n//         })}\n//       </div>\n      \n//       {showLink && (\n//         <Link to=\"/projects\" className=\"btn center-btn\">\n//           Alla projekt\n//         </Link>\n//       )}\n\n//     </section>\n//   )\n// }\n\n// export default Projects\n\n\nimport React from \"react\"\nimport Title from \"./Title\"\nimport Project from \"./Project\"\nimport OuterContentContainer from \"./containers/OuterPart\"\nimport InnerContentContainer from \"./containers/InnerPart\"\nimport ButtonLink from \"./containers/ButtonLink\"\n\n// Here we define the Projects section\nconst Projects = ({ projects, title, showLink }) => {\n  return (\n    <OuterContentContainer>\n      <Title title={title} />\n      <InnerContentContainer type=\"projects\">\n        {projects.map((project, index) => {\n          return <Project key={project.id} index={index} {...project} />\n        })}\n      </InnerContentContainer>\n      {showLink && <ButtonLink to=\"/projects\" center name=\"Alla projekt\" />}\n    </OuterContentContainer>\n  )\n}\n\nexport default Projects\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\n/* \r\n    I will set the default width to 90vw, but create an option to\r\n    set the width per Innercontainer manually. \r\n    This container is placed inside the OuterContentContainer \r\n    and under the Title-component.  \r\n    Depending on the type of the section and on the screensize,\r\n    we manipulate the grid in different ways. \r\n*/\r\nconst StyledInnerContainer = styled.div`\r\n  width: ${({ width = \"90vw\" }) => width};\r\n  margin: 0 auto;\r\n  max-width: ${({ theme }) => theme.widths.maxWidth};\r\n\r\n  @media screen and (min-width: 576px) {\r\n    display: ${({ type }) => type === \"blogs\" && \"grid\"};\r\n    grid-template-columns: ${({ type }) =>\r\n      type === \"blogs\" && \"repeat(auto-fill, minmax(368px, 1fr))\"};\r\n    column-gap: ${({ type }) => type === \"blogs\" && \"2rem\"};\r\n  }\r\n\r\n  @media screen and (min-width: 676px) {\r\n    display: ${({ type }) => type === \"services\" && \"grid\"};\r\n    grid-template-columns: ${({ type }) => type === \"services\" && \"1fr 1fr\"};\r\n    -webkit-column-gap: ${({ type }) => type === \"services\" && \"2rem\"};\r\n    -moz-column-gap: ${({ type }) => type === \"services\" && \"2rem\"};\r\n    column-gap: ${({ type }) => type === \"services\" && \"2rem\"};\r\n  }\r\n  \r\n  @media screen and (min-width: 992px) {\r\n    display: ${({ type }) =>\r\n      (type === \"services\" || type === \"jobs\") && \"grid\"};\r\n    width: ${({ type }) => (type === \"jobs\" ? \"90vw\" : \"95vw\")};\r\n    grid-template-columns: ${({ type }) =>\r\n      type === \"services\" ? \"1fr 1fr 1fr\" : type === \"jobs\" && \"200px 1fr\"};\r\n    column-gap: ${({ type }) => type === \"jobs\" && \"4rem\"};\r\n  }\r\n`\r\nconst InnerContentContainer = ({ children, type, width }) => {\r\n  return <StyledInnerContainer type={type} width={width}>{children}</StyledInnerContainer>\r\n}\r\nexport default InnerContentContainer\r\n"],"sourceRoot":""}